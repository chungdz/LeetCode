/*
给定一个整数数组和一个整数 k，你需要找到该数组中和为 k 的连续的子数组的个数。

示例 1 :

输入:nums = [1,1,1], k = 2
输出: 2 , [1,1] 与 [1,1] 为两种不同的情况。
说明 :

数组的长度为 [1, 20,000]。
数组中元素的范围是 [-1000, 1000] ，且整数 k 的范围是 [-1e7, 1e7]。
*/

/*
思路一

滑动窗口，向右拓展到大于等于K
向左缩小一位，回到1
保持数组大小的数字

一开始想到滑动窗口，然后敲完发现k可以是负值，然后想到了动态规划，然后就是放弃看题解了

*/

/*
思路和算法

考虑以 ii 结尾和为 kk 的连续子数组个数，我们需要统计符合条件的下标 jj 的个数，
其中 0\leq j\leq i0≤j≤i 且 [j..i][j..i] 这个子数组的和恰好为 kk 。

我们可以枚举 [0..i][0..i] 里所有的下标 jj 来判断是否符合条件，
可能有读者会认为假定我们确定了子数组的开头和结尾，还需要 O(n)O(n) 的时间复杂度遍历子数组来求和，
那样复杂度就将达到 O(n^3)

从而无法通过所有测试用例。但是如果我们知道 [j,i][j,i] 子数组的和，就能 O(1)
推出 [j-1,i][j−1,i] 的和，因此这部分的遍历求和是不需要的，
我们在枚举下标 jj 的时候已经能 O(1)O(1) 求出 [j,i][j,i] 的子数组之和。

*/

/*
方法二：前缀和 + 哈希表优化
思路和算法

我们可以基于方法一利用数据结构进行进一步的优化，我们知道方法一的瓶颈在于对每个 ii，我们需要枚举所有的 jj 来判断是否符合条件，这一步是否可以优化呢？答案是可以的。

我们定义 \textit{pre}[i]pre[i] 为 [0..i][0..i] 里所有数的和，则 \textit{pre}[i]pre[i] 可以由 \textit{pre}[i-1]pre[i−1] 递推而来，即：

\textit{pre}[i]=\textit{pre}[i-1]+\textit{nums}[i]
pre[i]=pre[i−1]+nums[i]

那么「[j..i][j..i] 这个子数组和为 kk 」这个条件我们可以转化为

\textit{pre}[i]-\textit{pre}[j-1]==k
pre[i]−pre[j−1]==k

简单移项可得符合条件的下标 jj 需要满足

\textit{pre}[j-1] == \textit{pre}[i] - k
pre[j−1]==pre[i]−k

所以我们考虑以 ii 结尾的和为 kk 的连续子数组个数时只要统计有多少个前缀和为 \textit{pre}[i]-kpre[i]−k 的 \textit{pre}[j]pre[j] 即可。我们建立哈希表 \textit{mp}mp，以和为键，出现次数为对应的值，记录 \textit{pre}[i]pre[i] 出现的次数，从左往右边更新 \textit{mp}mp 边计算答案，那么以 ii 结尾的答案 \textit{mp}[\textit{pre}[i]-k]mp[pre[i]−k] 即可在 O(1)O(1) 时间内得到。最后的答案即为所有下标结尾的和为 kk 的子数组个数之和。

需要注意的是，从左往右边更新边计算的时候已经保证了\textit{mp}[\textit{pre}[i]-k]mp[pre[i]−k] 里记录的 \textit{pre}[j]pre[j] 的下标范围是 0\leq j\leq i0≤j≤i 。同时，由于\textit{pre}[i]pre[i] 的计算只与前一项的答案有关，因此我们可以不用建立 \textit{pre}pre 数组，直接用 \textit{pre}pre 变量来记录 pre[i-1]pre[i−1] 的答案即可

*/